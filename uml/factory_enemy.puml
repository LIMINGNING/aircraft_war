@startuml
title:敌机工厂方法模式

interface EnemyFactory {
    + {abstract} createEnemy():EnemyAircraft
}

class MobFactory implements EnemyFactory{
    + createEnemy():EnemyAircraft
}

class EliteFactory implements EnemyFactory{
    + createEnemy():EnemyAircraft
}

abstract class EnemyAircraft
{
    + EnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {abstract} generateProp(int x, int y, List<AbstractProp> props):void
    + {abstract} getScore():int
 }

class MobEnemy extends EnemyAircraft{
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + generateProp(int x, int y, List<AbstractProp> props):void
    + getScore():int
}

class EliteEnemy extends EnemyAircraft{
    - shootNum:int
    - power:int
    - direction:int

    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + generateProp(int x, int y, List<AbstractProp> props):void
    + getScore():int
}

MobEnemy <.. MobFactory:<<create>>
EliteEnemy <.. EliteFactory:<<create>>
EnemyFactory <.. Game
EnemyAircraft <.. Game

@enduml